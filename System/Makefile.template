# 1: framework name
# 2: build root
# 3: install directory
# 4: source files
# 5: public header files
# 6: private header files
# 7: resources

ifeq ($(EMSCRIPTEN),)
$(error EMSCRIPTEN not defined)
endif

define framework_build

__FRAMEWORK_NAME__=$(1)
__BUILD_DIR__ = $(2)
__INSTALL_DIR__ = $(3)
__SOURCES__ = $(4)
__PUBLIC_HEADERS__ = $(5)
__PRIVATE_HEADERS__ = $(6)
__RESOURCE_DIR__ = $(7)
__HEADERS__ = $$(__PUBLIC_HEADERS__) $$(__PRIVATE_HEADERS__)

__OBJECTS__ = $$(patsubst %.m,%.o, \
          $$(patsubst %.c,%.o, \
          $$(patsubst %.mm,%.o, \
          $$(patsubst %.cpp,%.o, \
		  $$(addprefix $$(__BUILD_DIR__)/, $$(__SOURCES__))))))

__DEPS__ = $$(patsubst %.o,%.d, $$(__OBJECTS__))

.SUFFIX:
.PHONY: default clean framework_dir header_only_framework full_framework install_header install

default: full_framework

-include $$(__DEPS__)

clean:
	-/bin/rm -rf $$(__BUILD_DIR__)

$$(__BUILD_DIR__)/%.o: %.cpp
	mkdir -p $$(dir $$@)
	$$(CC) $$(STYLE_CFLAGS) $$(CFLAGS) -MMD -MP -MF $$(@:%.o=%.d) $$< -o $$@

$$(__BUILD_DIR__)/%.o: %.m
	mkdir -p $$(dir $$@)
	$$(CC) $$(STYLE_CFLAGS) $$(CFLAGS) -MMD -MP -MF $$(@:%.o=%.d) $$< -o $$@

$$(__BUILD_DIR__)/%.o: %.c
	mkdir -p $$(dir $$@)
	$$(CC) $$(STYLE_CFLAGS) $$(CFLAGS) -MMD -MP -MF $$(@:%.o=%.d) $$< -o $$@

$$(__BUILD_DIR__)/%.o: %.mm
	mkdir -p $$(dir $$@)
	$$(CC) $$(STYLE_CFLAGS) $$(CFLAGS) -MMD -MP -MF $$(@:%.o=%.d) $$< -o $$@

$$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__): $$(__OBJECTS__)
	llvm-link -o $$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__).bc $$^
	rm -f $$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__)
	llvm-ar rcs $$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__) $$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__).bc

framework_dir:
	rm -rf $$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__).framework
	mkdir -p $$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__).framework/Versions/A/Resources
	mkdir -p $$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__).framework/Versions/A/Headers
	mkdir -p $$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__).framework/Versions/A/PrivateHeaders
	ln -sf A $$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__).framework/Versions/Current
	ln -sf Versions/Current/Resources $$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__).framework/Resources
	ln -sf Versions/Current/Headers $$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__).framework/Headers
	ln -sf Versions/Current/PrivateHeaders $$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__).framework/PrivateHeaders
	ln -sf Versions/Current/$$(__FRAMEWORK_NAME__) $$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__).framework/$$(__FRAMEWORK_NAME__)

header_only_framework: framework_dir
	for file in $$(__PUBLIC_HEADERS__); do \
		dest=$$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__).framework/Versions/A/Headers/`dirname $$$${file#*$$(__FRAMEWORK_NAME__)/}` ;\
		mkdir -p $$$$dest ;\
		cp $$$$file $$$$dest ;\
	done
	for file in $$(__PRIVATE_HEADERS__); do \
		dest=$$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__).framework/Versions/A/PrivateHeaders/`dirname $$$${file#*$$(__FRAMEWORK_NAME__)/}` ;\
		mkdir -p $$$$dest ;\
		cp $$$$file $$$$dest ;\
	done

full_framework: header_only_framework $$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__)
	[ "$$(__RESOURCE_DIR__)" = "" ] || for file in `find $$(__RESOURCE_DIR__) -type f -not -name ".*"` ; do \
		dest=$$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__).framework/Versions/A/Resources/`dirname $$$${file#*/}` ;\
		mkdir -p $$$$dest ;\
		cp "$$$$file" $$$$dest ;\
	done
	cp $$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__) $$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__).framework/Versions/A/$$(__FRAMEWORK_NAME__)

install_header_only: header_only_framework
	rm -rf $$(__INSTALL_DIR__)/$$(__FRAMEWORK_NAME__).framework
	cp -R $$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__).framework $$(__INSTALL_DIR__)

install: full_framework
	rm -rf $$(__INSTALL_DIR__)/$$(__FRAMEWORK_NAME__).framework
	cp -R $$(__BUILD_DIR__)/$$(__FRAMEWORK_NAME__).framework $$(__INSTALL_DIR__)
	@echo "\033[1;43m==== Installing done. The framework is in $$(__INSTALL_DIR__) ====\033[m"

endef
